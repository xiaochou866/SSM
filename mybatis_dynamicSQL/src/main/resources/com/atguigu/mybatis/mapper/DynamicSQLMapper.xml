<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mybatis.mapper.DynamicSQLMapper">
    <!--
        动态SQL:
        1. if, 通过test属性中的表达式来判断标签中的内容是否有效(是否会拼接到sql中)
        2. where,
        a. 若where标签中有条件成立，会自动生成where关键字
        b. 会自动将where标签中内容前多余的and去掉，但是其中内容后多余的and无法去掉
        c. 若where标签中没有任何一个条件成立则where标签没有任何功能
        3. trim
        prefix,suffix:在标签中内容前面或后面添加指定内容
        prefixOverrides、suffixOverrides 在标签内容前面或后面去掉指定内容
        4.choose、when、otherwise
        相当于Java中的 if...else if...eles
        when至少设置一个
        otherwise最多设置一个 因为它表示的是else的情况 即其他情况
        5.forEach标签
        collection 设置要循环的数组或集合
        item 用一个字符串来表示数组或集合中的每一个数据
        separator 设置每次循环的数字之间的分隔符
        open 循环的所有内容以什么开始
        close 循环的所有内容以什么结束
        6.sql片段
        可以记录一段sql,在需要用的地方使用include标签进行引用
        <sql id="empColumns">
            emp_id,emp_name,age,gender,dept_id
        </sql>
    -->

    <sql id="empColumns">
        emp_id,emp_name,age,gender,dept_id
    </sql>
    <!--List<Emp> getEmpByCondition(Emp emp);-->
    <select id="getEmpByCondition" resultType="Emp">
        select <include refid="empColumns"></include> from t_emp
        <trim prefix="where" suffixOverrides="and">
            <if test="empName != null and empName!=''">
                emp_name = #{empName} and
            </if>
            <if test="age != null and age!=''">
                age = #{age} and
            </if>
            <if test="gender != null and gender!=''">
                gender = #{gender}
            </if>
        </trim>
    </select>

    <select id="getEmpByConditionOne" resultType="Emp">
        select * from t_emp
        <where>
            <if test="empName != null and empName!=''">
                emp_name = #{empName}
            </if>
            <if test="age != null and age!=''">
                and age = #{age}
            </if>
            <if test="gender != null and gender!=''">
                and gender = #{gender}
            </if>
        </where>
    </select>

    <select id="getEmpByConditionTwo" resultType="Emp">
        select * from t_emp where 1=1
        <if test="empName != null and empName!=''">
            and emp_name = #{empName}
        </if>
        <if test="age != null and age!=''">
            and age = #{age}
        </if>
        <if test="gender != null and gender!=''">
            and gender = #{gender}
        </if>
    </select>

    <!--List<Emp> getEmpByChoose(Emp emp);-->
    <select id="getEmpByChoose" resultType="Emp">
        select * from t_emp
        <where>
            <choose>
                <when test="empName!=null and empName!=''">
                    emp_name = #{empName}
                </when>
                <when test="age!=null and age!=''">
                    age = #{age}
                </when>
                <when test="gender!=null and gender!=''">
                    gender = #{gender}
                </when>
            </choose>
        </where>
    </select>

    <!--void insertMoreEmp(List<Emp> emps);-->
    <insert id="insertMoreEmp">
        insert into t_emp values
        <!--<foreach collection="list"-->
        <foreach collection="emps" item="emp" separator=",">
            (null,#{emp.empName},#{emp.age}, #{emp.gender},null)
        </foreach>
    </insert>

    <!--void deleteMoreEmp(@Param("empIds") Integer[] empIds);-->
    <delete id="deleteMoreEmp">
        <!--第一种方式带有左右小括号-->
        <!--第二种方式使用open和close-->
        <!--delete from t_emp where emp_id in-->
        <!--<foreach collection="empIds" item="empId" separator="," open="(" close=")">-->
        <!--    #{empId}-->
        <!--</foreach>-->
        delete from t_emp where
        <foreach collection="empIds" item="empId" separator="or">
            emp_id = #{empId}
        </foreach>
    </delete>
</mapper>